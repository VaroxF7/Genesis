GTCEuStartupEvents.registry('gtceu:recipe_type', event => {
    event.create('graviton_compressor')
        .category('graviton_compressor')
        .setEUIO('in')
        .setMaxIOSize(4, 4, 4, 4)// Max Item Inputs, Max Item Outputs, Max Fluid Inputs, Max Fluid Outputs
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.COMPUTATION)
        .setMaxTooltips(3);
});

GTCEuStartupEvents.registry('gtceu:machine', event => {
    event.create('graviton_compressor', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH,GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.PERFECT_OVERCLOCK)])
        .appearanceBlock(() => Block.getBlock('gtceu:sturdy_machine_casing'))
        .recipeType('graviton_compressor')
        .pattern(definition => FactoryBlockPattern.start()
        .aisle('           DDD           ','        DDDDDDDDD        ','           DDD           ')
        .aisle('         CCCCCCC         ','      DDDCCCCCCCDDD      ','         CCCCCCC         ')
        .aisle('       CC       CC       ','    DDDCC  LLL  CCDDD    ','       CC       CC       ')
        .aisle('     CC           CC     ','   DDCC    LLL    CCDD   ','     CC           CC     ')
        .aisle('    C     CCCCC     C    ','  DDCL    CCCCC    LCDD  ','    C     CCCCC     C    ')
        .aisle('   C    CC     CC    C   ','  DCLLL CCHHHHHCC LLLCD  ','   C    CC     CC    C   ')
        .aisle('   C   C         C   C   ',' DDC LLCHHH   HHHCLL CDD ','   C   C         C   C   ')
        .aisle('  C   C           C   C  ',' DC   CHH       HHC   CD ','  C   C           C   C  ')
        .aisle('  C  C             C  C  ','DDC  CHH         HHC  CDD','  C  C             C  C  ')
        .aisle(' C   C             C   C ','DC   CH           HC   CD',' C   C             C   C ')
        .aisle(' C  C               C  C ','DC  CHH           HHC  CD',' C  C               C  C ')
        .aisle(' C  C               C  C ','DCLLCH             HCLLCD',' C  C               C  C ')
        .aisle(' C  C               C  C ','DCLLCH             HCLLCD',' C  C               C  C ')
        .aisle(' C  C               C  C ','DCLLCH             HCLLCD',' C  C               C  C ')
        .aisle(' C  C               C  C ','DC  CHH           HHC  CD',' C  C               C  C ')
        .aisle(' C   C             C   C ','DC   CH           HC   CD',' C   C             C   C ')
        .aisle('  C  C             C  C  ','DDC  CHH         HHC  CDD','  C  C             C  C  ')
        .aisle('  C   C           C   C  ',' DC   CHH       HHC   CD ','  C   C           C   C  ')
        .aisle('   C   C         C   C   ',' DDC LLCHHH   HHHCLL CDD ','   C   C         C   C   ')
        .aisle('   C    CC     CC    C   ','  DCLLL CCHHHHHCC LLLCD  ','   C    CC     CC    C   ')
        .aisle('    C     CCCCC     C    ','  DDCL    CCCCC    LCDD  ','    C     CCCCC     C    ')
        .aisle('     CC           CC     ','   DDCC    LLL    CCDD   ','     CC           CC     ')
        .aisle('       CC       CC       ','    DDDCC  LLL  CCDDD    ','       CC       CC       ')
        .aisle('         CCCCCCC         ','      DDDCCCCCCCDDD      ','         CCCCCCC         ')
        .aisle('           DDD           ','        DDDDKDDDD        ','           DDD           ')
            .where('K', Predicates.controller(Predicates.blocks(definition.get())))
            .where('L', Predicates.blocks('gtceu:shock_proof_cutting_casing'))
            .where('H', Predicates.blocks('gtceu:hssg_coil_block'))
            .where('C', Predicates.blocks('gtceu:nonconducting_casing'))
            .where(' ', Predicates.any())
            .where('D', Predicates.blocks('gtceu:sturdy_machine_casing')
              .or(Predicates.autoAbilities(definition.getRecipeTypes()))
              .or(Predicates.blocks(PartAbility.INPUT_ENERGY).setMaxGlobalLimited(3))
              .or(Predicates.blocks(PartAbility.EXPORT_ITEMS))
              .or(Predicates.blocks(PartAbility.IMPORT_ITEMS))
              .or(Predicates.blocks(PartAbility.EXPORT_FLUIDS))
              .or(Predicates.blocks(PartAbility.IMPORT_FLUIDS))
              .or(Predicates.blocks(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1)))
            .build()
        )
        .workableCasingRenderer('gtceu:block/casings/solid/machine_casing_sturdy_hsse', 'gtceu:block/multiblock/fusion_reactor', false)
});